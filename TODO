Thoughts about future releases, in no particular order.
Feel free to share your thoughts with me at  mob@cpan.org .

Possible TODOs:

    ___ incorporate free memory into system busy-ness calc 
		(Parallel::ForkControl)	(Parallel::ForkControl says 
		"non functional")

    _X_ implement child handles through pipe objects
	___ use IO::Pipe
	_X_ document, extend file vs. socket discussion
	    On MSWin32, for example, pipe capacity is 512 bytes?

    _x_ support sockets/pipes for cmd-style forks like IPC::Open3 does.
	_X_ for Unixy systems
	___ for MSWin32

    ___ Support for launching tasks on remote hosts (maybe that's beyond
        the scope of this module) See Paralell::PVM?

    ___	Forks::Super::Uninterruptable package for "uninterruptable" versions
	of Perl system calls like  sleep , connect , select($$$$). Well,
        for interruption-resistant versions, anyway.

    ___ Make Forks::Super safe(r) for unsafe signals (pre 5.7.3, see perlipc).
	Can test with  PERL_SIGNALS=unsafe make test .

    ___	Make CONFIG{filehandles} meaningful. If we set CONFIG{filehandles}=0,
	then all IPC should be through sockets or pipes.

    ___ There's enough stuff in here now that performance is affected,
	especially when there are lots of short tasks. See what
	can be done to tighten up performance.

	Also document tips and tricks for tuning performance.
	Things like "Set $Forks::Super::Util::DEFAULT_PAUSE to
	a small value when you have lots of short tasks, and
	longer for longer tasks".

    ___ Test needed, Win32+cmd, See Job.pm:344 (404?) 
        (FSJO::Win32::openX_win32_process?)

    _x_ With cmd and child_fh => "in" where cmd has pipes (cmd1 | cmd2),
	'<.fhfork/.fh_xxx' needs to go _before_ the first pipe
	_X_ solve basic case
	___ solve complicated case, where first pipe char might be a
	    quoted argument, or part of an argument.
	    e.g., what if the external command is
		perl -F/\\\|/ -ane 'BLOCK' < .fhforkXXX/.fh_XXX | ./other_prog

    ___ fork { run => [ \@cmd, ... ] }
	to invoke or emulate IPC::Run's rich feature set
	___ What else can I learn by studying IPC::Run?

    ___ More tests from a child process and see what breaks.
		use Forks::Super;
		CORE::fork() && exit;
		# now $$ != $MAIN_PID but this is the
		# "parent" process of Forks::Super.
		do_something_and_see_if_it_works();

    _o_ Investigate "filehandle leaks" in t/forked_harness.pl.

    ___ Tie scalar in parent to read end of a pipe? As child
	writes to the pipe, the scalar can be updated in
	the parent?

	Use case is  fork { stdout => $output }, and to be able
	to read/use intermediate $output values without having to
	wait for the child to finish.

	Prototype in spike-pipe-tie2.pl

	___ scalar is associated with a read handle and the job
	___ add scalar to a global list/set of pipes to read from
	___ on FETCH and during productive pauses, pull the most recent output
	___ on close in the parent, optionally kill the child process,
		close both the read and write ends of the filehandle

    ___ Tie all filehandles from _safeopen for improved debugging
	in Forks::Super::Job::IPC. 

    ___ block attribute or block value in child_fh attribute to
	indicate whether blocking I/O is desired.

    ___ block/noblock option in F::S::J::read_stdxxx

    ___ fork { input_fh => [ 'X', 'Y', 'Z' ], output_fh => [ 'STDOUT', 'A' ] }

		open input and output filehandles in the child with the given 
		names, accessible in the parent at something like 
		$Forks::Super::CHILD_FH{$pid}{X}

    ___ what else to configure at build time?
	___ e.g. "has Unixy signal framework"
	___ "is Windows"
	___ "is Windows/Cygwin"
	___ we can spoof this information for some tests ...

    ___ Natural language extension to timeout, expiration, delay, 
	start_after options:

	___ fork { timeout => "10 minutes" }
 	___ fork { expiration => "8:00 am Tuesday" }
 	___ fork { start_after => "midnight" }
	___ fork { expiration => "3:00 am tomorrow" }

	See DateTime::Format::Natural

    ___ Reimplement gensym() in Forks::Super::Job::Ipc to use
	safer 'Forks::Super::Symbol' package ?

    ___ Rework Forks::Super::LazyEval to use overloading rather
        than tied scalars. Use case is to be able to use
        $output rather than $$output.

    ___ Forks::Super::Util::Time() is redundant. Replace with
	Time::HiRes::gettimeofday().

